

    class Node:
        def __init__(self, e, n):
            self.element = e
            self.next = n

    class LinkedList:
      
        def __init__(self, a):
      #  Design the constructor based on data type of a. If 'a' is built in python list then
      #  Creates a linked list using the values from the given array. head will refer
      #  to the Node that contains the element from a[0]
      #  Else Sets the value of head. head will refer
      # to the given LinkedList

      # Hint: Use the type() function to determine the data type of a
            self.head = None
            if type(a)==list:
                self.head=Node(a[0],None)
                tail=self.head
                for i in range(1,len(a)):
                    temp=Node(a[i],None)
                    tail.next=temp           
                    tail=temp  
            else:
                self.head=a        
                
      # Count the number of nodes in the list
        def countNode(self):
            h=self.head
            count=0
            while h!=None: 
                count+=1
                h=h.next
            return count
      
      # Print elements in the list
        def printList(self):
            count=0
            h=self.head
            while h!=None:
                count+=1
                if count!=self.countNode():
                    print(h.element,end=',')
                else:
                    print(h.element,end='.')
                h=h.next
            print('')

      # returns the reference of the Node at the given index. For invalid index return None.
        def nodeAt(self, idx):
            if idx<0 or idx>self.countNode()-1:
                return None
            else:
                count=0
                h=self.head
                while count!=idx:
                    h=h.next
                    count+=1
                return h
                    
                
      # returns the element of the Node at the given index. For invalid idx return None.
        def get(self, idx):
            if idx<0 or idx>self.countNode()-1:
                return None
            else:
                count=0
                h=self.head
                while count!=idx:
                    h=h.next
                    count+=1
                return h.element
      
      # updates the element of the Node at the given index. 
      # Returns the old element that was replaced. For invalid index return None.
      # parameter: index, element
        def set(self, idx, elem):
            if idx<0 or idx>self.countNode()-1:
                return None
            else:
                h=self.head
                count=0
                while count!=idx:
                    h=h.next
                    count+=1
                temp=h.element
                h.element=elem
                return temp

      # returns the index of the Node containing the given element.
      # if the element does not exist in the List, return -1.
        def indexOf(self, elem):
            out=-1
            h=self.head
            count=0
            while count!=self.countNode():
                if h.element==elem:
                    out=count
                h=h.next
                count+=1
            return out
              
      # returns true if the element exists in the List, return false otherwise.
        def contains(self, elem):
            out=False
            h=self.head
            while h!=None:
                if h.element==elem:
                    out=True
                h=h.next
            return out

      # Makes a duplicate copy of the given List. Returns the reference of the duplicate list.
        def copyList(self):
            h=self.head
            copyhead=None                         
            tail=None
            while h!=None:
                temp=Node(h.element,None)
                if copyhead==None:     
                    copyhead=temp
                    tail=copyhead
                else:
                    tail.next=temp
                    tail=temp
                h=h.next
            return copyhead        

      # Makes a reversed copy of the given List. Returns the head reference of the reversed list.
        def reverseList(self):      
            h=self.head
            copyhead=None
            while h!=None:
                temp=Node(h.element,None)
                if copyhead==None:               
                    copyhead=temp   
                else:
                    temp.next=copyhead
                    copyhead=temp
                h=h.next
            return copyhead        
      
      # inserts Node containing the given element at the given index
      # Check validity of index.
        def insert(self, elem, idx):
            if idx<0 or idx>self.countNode():
                return None
            else:
                h=self.head
                temp=Node(elem,None)
                if idx==0:
                    temp.next=self.head
                    self.head=temp
                elif idx==self.countNode():
                    h=self.nodeAt(idx-1) 
                    h.next=temp
                else:
                    h=self.nodeAt(idx-1)
                    x=h.next
                    temp.next=x
                    h.next=temp

      # removes Node at the given index. returns element of the removed node.
      # Check validity of index. return None if index is invalid.
        def remove(self, idx):
            if idx<0 or idx>self.countNode()-1:
                return None
            else:
                h=self.head
                removed_elem=0
                if idx==0:
                    self.head=h.next
                    removed_elem=h.element
                    h=None
                elif idx==self.countNode():
                    h=self.nodeAt(idx) 
                    removed_elem=h.element
                    h=None
                else:
                    h=self.nodeAt(idx)
                    y=self.nodeAt(idx-1)
                    x=self.nodeAt(idx+1)
                    removed_elem=h.element
                    y.next=x
                    h=None
                return removed_elem               
      
      # Rotates the list to the left by 1 position.
        def rotateLeft(self):
            oldhead=self.head
            tail=self.head
            self.head=oldhead.next
            while tail.next!=None:  
                tail=tail.next
            tail.next=oldhead
            oldhead.next=None
            return self.head

      # Rotates the list to the right by 1 position.
        def rotateRight(self):
            oldhead=self.head
            x=self.nodeAt(self.countNode()-1)
            y=self.nodeAt(self.countNode()-2)
            x.next=oldhead
            y.next=None
            self.head=x
            return self.head
            
            

    print("////// Test 01 //////")
    a1 = [10, 20, 30, 40]
    h1 = LinkedList(a1) # Creates a linked list using the values from the array
    # head will refer to the Node that contains the element from a[0]

    h1.printList() # This should print: 10,20,30,40
    print(h1.countNode()) # This should print: 4

    print("////// Test 02 //////")
    # returns the reference of the Node at the given index. For invalid idx return None.
    myNode = h1.nodeAt(1) 
    print(myNode.element) # This should print: 20. In case of invalid index This will generate an Error.
        
    print("////// Test 03 //////")
    # returns the element of the Node at the given index. For invalid idx return None.
    val = h1.get(2)
    print(val) # This should print: 30. In case of invalid index This will print None.
        
        
    print("////// Test 04 //////")
        
    # updates the element of the Node at the given index. 
    # Returns the old element that was replaced. For invalid index return None.
    # parameter: index, element
             
    print(h1.set(1,85)) # This should print: 20
    h1.printList() # This should print: 10,85,30,40.
    print(h1.set(15,85)) # This should print: None
    h1.printList() # This should print: 10,85,30,40. 
        
    print("////// Test 05 //////")
    # returns the index of the Node containing the given element.
    # if the element does not exist in the List, return -1.
    index = h1.indexOf(40)
    print(index) # This should print: 3. In case of element that doesn't exists in the list this will print -1.
        
    print("////// Test 06 //////")
    # returns true if the element exists in the List, return false otherwise.
    ask = h1.contains(40)
    print(ask) # This should print: True.
        
        
    print("////// Test 07 //////")
    a2 = [10,20,30,40,50,60,70]
    h2 = LinkedList(a2) # uses theconstructor where a is an built in list
    h2.printList() # This should print: 10,20,30,40,50,60,70.  
    # Makes a duplicate copy of the given List. Returns the head reference of the duplicate list.
    copyH=h2.copyList() # Head node reference of the duplicate list
    h3 = LinkedList(copyH) # uses the constructor where a is head of a linkedlist 
    h3.printList() # This should print: 10,20,30,40,50,60,70.  
        
    print("////// Test 08 //////")
    a4 = [10,20,30,40,50]
    h4 = LinkedList(a4) # uses theconstructor where a is an built in list
    h4.printList() # This should print: 10,20,30,40,50.  
    # Makes a reversed copy of the given List. Returns the head reference of the reversed list.
    revH=h4.reverseList() # Head node reference of the reversed list
    h5 = LinkedList(revH) # uses the constructor where a is head of a linkedlist 
    h5.printList() # This should print: 50,40,30,20,10.  
        
    print("////// Test 09 //////")
    a6 = [10,20,30,40]
    h6 = LinkedList(a6) # uses theconstructor where a is an built in list
    h6.printList() # This should print: 10,20,30,40.  
        
    # inserts Node containing the given element at the given index. Check validity of index.
    h6.insert(85,0)
    h6.printList() # This should print: 85,10,20,30,40.  
    h6.insert(95,3)
    h6.printList() # This should print: 85,10,20,95,30,40.  
    h6.insert(75,6)
    h6.printList() # This should print: 85,10,20,95,30,40,75. 
        
        
        
    print("////// Test 10 //////")
    a7 = [10,20,30,40,50,60,70]
    h7 = LinkedList(a7) # uses theconstructor where a is an built in list
    h7.printList() # This should print: 10,20,30,40,50,60,70.  
        
    # removes Node at the given index. returns element of the removed node.
    # Check validity of index. return None if index is invalid.
        
    print("Removed element:",h7.remove(0)) # This should print: Removed element: 10
    h7.printList() # This should print: 20,30,40,50,60,70.  
    print("Removed element: ",h7.remove(3)) # This should print: Removed element: 50
    h7.printList() # This should print: 20,30,40,60,70.  
    print("Removed element: ",h7.remove(4)) # This should print: Removed element: 70
    h7.printList() # This should print: 20,30,40,60. 
        
        
    print("////// Test 11 //////")
    a8 = [10,20,30,40]
    h8 = LinkedList(a8) # uses theconstructor where a is an built in list
    h8.printList() # This should print: 10,20,30,40.  
        
    # Rotates the list to the left by 1 position.
    h8.rotateLeft()
    h8.printList() # This should print: 20,30,40,10.  
        
        
    print("////// Test 12 //////")
    a9 = [10,20,30,40]
    h9 = LinkedList(a9) # uses theconstructor where a is an built in list
    h9.printList() # This should print: 10,20,30,40.  
        
    # Rotates the list to the right by 1 position.
    h9.rotateRight()
    h9.printList() # This should print: 40,10,20,30.

    ////// Test 01 //////
    10,20,30,40.
    4
    ////// Test 02 //////
    20
    ////// Test 03 //////
    30
    ////// Test 04 //////
    20
    10,85,30,40.
    None
    10,85,30,40.
    ////// Test 05 //////
    3
    ////// Test 06 //////
    True
    ////// Test 07 //////
    10,20,30,40,50,60,70.
    10,20,30,40,50,60,70.
    ////// Test 08 //////
    10,20,30,40,50.
    50,40,30,20,10.
    ////// Test 09 //////
    10,20,30,40.
    85,10,20,30,40.
    85,10,20,95,30,40.
    85,10,20,95,30,40,75.
    ////// Test 10 //////
    10,20,30,40,50,60,70.
    Removed element: 10
    20,30,40,50,60,70.
    Removed element:  50
    20,30,40,60,70.
    Removed element:  70
    20,30,40,60.
    ////// Test 11 //////
    10,20,30,40.
    20,30,40,10.
    ////// Test 12 //////
    10,20,30,40.
    40,10,20,30.
