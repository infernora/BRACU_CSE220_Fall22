

    class Node:
        def __init__(self, e, n, p):
            self.element = e
            self.next = n
            self.prev = p

    class DoublyList:
        def __init__(self, a):
      #  Design the constructor based on data type of a. If 'a' is built in python list then
      #  Creates a linked list using the values from the given array.
            self.head = None
            if type(a)==list:
                self.head=Node(None,None,None)
                tail=self.head                     
                for i in range(len(a)):
                    n=Node(a[i],None,None)
                    tail.next=n
                    n.prev=tail
                    tail=n
                tail.next=self.head
                self.head.prev=tail
            else:
                self.head.next=a
      
      # Counts the number of Nodes in the list
        def countNode(self):
            h=self.head.next               
            count=0
            while h!=self.head:
                count+=1
                h=h.next
            return count
      
      # prints the elements in the list
        def forwardprint(self):
            h=self.head.next
            count=0
            while h!=self.head:
                if count!=self.countNode()-1:
                    print(h.element,end=',')
                else:
                    print(h.element,end='.')
                count+=1
                h=h.next
            print('')

      # prints the elements in the list backward
        def backwardprint(self):
            h=self.head.prev
            count=0
            while h!=self.head:
                if count!=self.countNode()-1:
                    print(h.element,end=',')
                else:
                    print(h.element,end='.')
                count+=1
                h=h.prev
            print('')

      # returns the reference of the at the given index. For invalid index return None.
        def nodeAt(self, idx):
            if idx<0 or idx>self.countNode()-1:
                return None
            else:
                h=self.head.next
                count=0
                while count!=idx:
                    h=h.next
                    count+=1
                return h
      
      # returns the index of the containing the given element. if the element does not exist in the List, return -1.
        def indexOf(self, elem):
            h=self.head.next
            count=0
            out=-1
            while h!=self.head:
                if h.element==elem:
                    out=count
                h=h.next
                count+=1
            return out

      # inserts containing the given element at the given index Check validity of index. 
        def insert(self, elem, idx):
            if idx<0 or idx>self.countNode():
                return None
            else:
                idx=idx+1
                i=0
                h=self.head
                while i<idx:
                    h=h.next
                    i+=1    
                n=Node(elem,None,None)
                x=h.prev
                n.next=h
                h.prev=n
                x.next=n
                n.prev=x
                    
      # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
        def remove(self, idx):
            if idx<0 or idx>self.countNode()-1:
                return None
            else:
                idx=idx+1
                i=0
                h=self.head
                while i<idx:
                    h=h.next
                    i+=1
                removed_elem=h.element
                x=h.prev
                n=h.next
                x.next=n
                n.prev=x
                h=None
                return str(removed_elem)

    print("///  Test 01  ///")
    a1 = [10, 20, 30, 40]
    h1 = DoublyList(a1) # Creates a linked list using the values from the array

    h1.forwardprint() # This should print: 10,20,30,40. 
    h1.backwardprint() # This should print: 40,30,20,10. 
    print(h1.countNode()) # This should print: 4

    print("///  Test 02  ///")
    # returns the reference of the at the given index. For invalid idx return None.
    myNode = h1.nodeAt(2)
    print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"

    print("///  Test 03  ///")
    # returns the index of the containing the given element. if the element does not exist in the List, return -1.
    index = h1.indexOf(40)
    print(index) # This should print: 3. In case of element that 
    #doesn't exists in the list this will print -1.

    print("///  Test 04  ///")

    a2 = [10, 20, 30, 40]
    h2 = DoublyList(a2) # uses the  constructor
    h2.forwardprint() # This should print: 10,20,30,40.  

    # inserts containing the given element at the given index. Check validity of index.
    h2.insert(85,0)
    h2.forwardprint() # This should print: 85,10,20,30,40. 
    h2.backwardprint() # This should print: 40,30,20,10,85.

    print()
    h2.insert(95,3)
    h2.forwardprint() # This should print: 85,10,20,95,30,40.  
    h2.backwardprint() # This should print: 40,30,95,20,10,80.  

    print()
    h2.insert(75,6)
    h2.forwardprint() # This should print: 85,10,20,95,30,40,75. 
    h2.backwardprint() # This should print: 75,40,30,95,20,10,85. 


    print("///  Test 05  ///")
    a3 = [10, 20, 30, 40, 50, 60, 70]
    h3 = DoublyList(a3) # uses the constructor
    h3.forwardprint() # This should print: 10,20,30,40,50,60,70.  

    # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
    print("Removed element: "+ h3.remove(0)) # This should print: Removed element: 10
    h3.forwardprint() # This should print: 20,30,40,50,60,70.  
    h3.backwardprint() # This should print: 70,60,50,40,30,20.  
    print("Removed element: "+ h3.remove(3)) # This should print: Removed element: 50
    h3.forwardprint() # This should print: 20,30,40,60,70.  
    h3.backwardprint() # This should print: 70,60,40,30,20.  
    print("Removed element: "+ h3.remove(4)) # This should print: Removed element: 70
    h3.forwardprint() # This should print: 20,30,40,60. 
    h3.backwardprint() # This should print: 60,40,30,20.

    ///  Test 01  ///
    10,20,30,40.
    40,30,20,10.
    4
    ///  Test 02  ///
    30
    ///  Test 03  ///
    3
    ///  Test 04  ///
    10,20,30,40.
    85,10,20,30,40.
    40,30,20,10,85.

    85,10,20,95,30,40.
    40,30,95,20,10,85.

    85,10,20,95,30,40,75.
    75,40,30,95,20,10,85.
    ///  Test 05  ///
    10,20,30,40,50,60,70.
    Removed element: 10
    20,30,40,50,60,70.
    70,60,50,40,30,20.
    Removed element: 50
    20,30,40,60,70.
    70,60,40,30,20.
    Removed element: 70
    20,30,40,60.
    60,40,30,20.
