

    class CircularArray:                       
        def __init__(self, lin, st, sz):
            self.start = st
            self.size = sz
            self.cir=[0]*len(lin)
            i=0
            j=self.start
            while i<self.size:
                self.cir[j]=lin[i]
                j=(j+1)%len(lin)
                i+=1
                
        # Print from index 0 to len(cir) - 1            
        def printFullLinear(self):
            for i in range(len(self.cir)):
                if i!=(len(self.cir)-1):
                    if self.cir[i]==0:
                        print('None',end=', ')
                    else:
                        print(self.cir[i],end=', ')
                else:
                    if self.cir[i]==0:
                        print('None',end='')
                    else:
                        print(self.cir[i],end='')       
            print('')
         
        # Print from start index and total size elements
        def printForward(self):
            i=self.start
            count=0
            while count<self.size:
                if count==(self.size-1):
                    print(self.cir[i],end='')
                else:
                    print(self.cir[i],end=', ')
                i=(i+1)%len(self.cir)
                count+=1
            print('')
        
        def printBackward(self):
            last=(self.start+self.size-1)%len(self.cir)
            count=0
            while count<self.size:
                if count==(self.size-1):
                    print(self.cir[last],end='')
                else:
                    print(self.cir[last],end=', ')
                last-=1
                if last<0:
                    last=len(self.cir)-1
                count+=1
            print('')        
         
        # With no null cells
        def linearize(self):
            lin=[0]*self.size
            i=self.start
            j=0
            while j<self.size:
                lin[j]=self.cir[i]
                j+=1
                i=(i+1)%len(self.cir)
            self.cir=lin
            self.start=0
        
        # Do not change the Start index
        def resizeStartUnchanged(self,newcapacity):
            new_cir=[None]*newcapacity
            i=self.start
            j=self.start
            count=0
            while count<self.size:
                new_cir[j]=self.cir[i]
                i=(i+1)%len(self.cir)
                j=(j+1)%len(new_cir)
                count+=1
            self.cir=new_cir
            self.size=newcapacity
        
        # This method will check whether the array is palindrome or not
        def palindromeCheck(self):
            i=self.start
            last=((self.start+self.size)-1)%len(self.cir)
            pal=True
            while last!=i:
                if self.cir[i]==self.cir[last]:
                    pal=True
                else:
                    pal=False
                    break
                i=(i+1)%len(self.cir)
                last-=1
                if last<0:
                    last=len(self.cir)-1
            if pal==True:
                print('This array is a palindrome')
            else:
                print('This array is NOT a palindrome')
        
        # This method will sort the values by keeping the start unchanged
        def sort(self):
            idx1=self.start
            for i in range(self.size):
                idx2=(idx1+1)%len(self.cir)
                for j in range(i,self.size):  
                    if  self.cir[idx1]!=0 and self.cir[idx2]!=0: 
                        if self.cir[idx1]>self.cir[idx2]:
                            temp=self.cir[idx1]
                            self.cir[idx1]=self.cir[idx2]
                            self.cir[idx2]=temp
                        idx2=(idx2+1)%len(self.cir)
                idx1=(idx1+1)%len(self.cir)
            
        # This method will check the given array across the base array and if they are equivalent interms of values return true, or else return false
        def equivalent(self, cir_arr):
            idx=self.start
            j=cir_arr.start
            equal=True
            for i in range(self.size):
                if self.cir[idx]!=0:
                    if self.cir[idx]==cir_arr.cir[j]:
                        equal=True
                    else:
                        equal=False
                        break
                idx=(idx+1)%len(self.cir)
                j=(j+1)%len(cir_arr.cir)
            return equal
        
        # the method take another circular array and returns a linear array containing the common elements between the two circular arrays.
        def intersection(self, c2):
            idx=self.start
            count=0
            j=0
            for i in range(self.size):
                if self.cir[idx] in c2.cir and self.cir[idx]!=0:
                    count+=1
                idx=(idx+1)%len(self.cir)
            idx=self.start
            new_arr=[0]*count
            for i in range(self.size):
                if self.cir[idx] in c2.cir and self.cir[idx]!=0:
                    new_arr[j]=self.cir[idx]
                    j+=1          
                idx=(idx+1)%len(self.cir)
            return new_arr               

    # Tester class. Run this cell after completing methods in the upper cell and
    # check the output

    lin_arr1 = [10, 20, 30, 40, None]

    print("==========Test 1==========")
    c1 = CircularArray(lin_arr1, 2, 4)
    c1.printFullLinear() # This should print: 40, None, 10, 20, 30
    c1.printForward() # This should print: 10, 20, 30, 40
    c1.printBackward() # This should print: 40, 30, 20, 10

    print("==========Test 2==========")
    c1.linearize()
    c1.printFullLinear() # This should print: 10, 20, 30, 40

    print("==========Test 3==========")
    lin_arr2 = [10, 20, 30, 40, 50]
    c2 = CircularArray(lin_arr2, 2, 5)
    c2.printFullLinear() # This should print: 40, 50, 10, 20, 30
    c2.resizeStartUnchanged(8) # parameter --> new Capacity
    c2.printFullLinear() # This should print: None, None, 10, 20, 30, 40, 50, None

    print("==========Test 4==========")
    lin_arr3 = [10, 20, 30, 20, 10, None, None]
    c3 = CircularArray(lin_arr3, 3, 5)
    c3.printForward() # This should print: 10, 20, 30, 20, 10
    c3.palindromeCheck() # This should print: This array is a palindrome

    print("==========Test 5==========")
    lin_arr4 = [10, 20, 30, 20, None, None, None]
    c4 = CircularArray(lin_arr4, 3, 4)
    c4.printForward() # This should print: 10, 20, 30, 20
    c4.palindromeCheck() # This should print: This array is NOT a palindrome

    print("==========Test 6==========")
    lin_arr5 = [10, 20, -30, 20, 50, 30, None]
    c5 = CircularArray(lin_arr5, 5, 6)
    c5.printForward() # This should print: 10, 20, -30, 20, 50, 30
    c5.sort()
    c5.printForward() # This should print: -30, 10, 20, 20, 30, 50

    print("==========Test 7==========")
    lin_arr6 = [10, 20, -30, 20, 50, 30, None]
    c6 = CircularArray(lin_arr6, 2, 6)
    c7 = CircularArray(lin_arr6, 5, 6)
    c6.printForward() # This should print: 10, 20, -30, 20, 50, 30
    c7.printForward() # This should print: 10, 20, -30, 20, 50, 30
    print(c6.equivalent(c7)) # This should print: True

    print("==========Test 8==========")
    lin_arr7 = [10, 20, -30, 20, 50, 30, None, None, None]
    c8 = CircularArray(lin_arr7, 8, 6)
    c6.printForward() # This should print: 10, 20, -30, 20, 50, 30
    c8.printForward() # This should print: 10, 20, -30, 20, 50, 30
    print(c6.equivalent(c8)) # This should print: True

    print("==========Test 9==========")
    lin_arr8 = [10, 20, 30, 40, 50, 60, None, None, None]
    c9 = CircularArray(lin_arr8, 8, 6)
    c6.printForward() # This should print: 10, 20, -30, 20, 50, 30
    c9.printForward() # This should print: 10, 20, 30, 40, 50, 60
    print(c6.equivalent(c9)) # This should print: False

    print("==========Test 10==========")
    lin_arr9 = [10, 20, 30, 40, 50, None, None, None]
    c10 = CircularArray(lin_arr9, 5, 5)
    c10.printFullLinear() # This should print: 40, 50, None, None, None, 10, 20, 30
    lin_arr10 = [5, 40, 15, 25, 10, 20, 5, None, None, None, None, None]
    c11 = CircularArray(lin_arr10, 8, 7)
    c11.printFullLinear() # This should print: 10, 20, 5, None, None, None, None, None, 5, 40, 15, 25
    output = c10.intersection(c11)
    print(output) # This should print: [10, 20, 40]

    ==========Test 1==========
    40, None, 10, 20, 30
    10, 20, 30, 40
    40, 30, 20, 10
    ==========Test 2==========
    10, 20, 30, 40
    ==========Test 3==========
    40, 50, 10, 20, 30
    None, None, 10, 20, 30, 40, 50, None
    ==========Test 4==========
    10, 20, 30, 20, 10
    This array is a palindrome
    ==========Test 5==========
    10, 20, 30, 20
    This array is NOT a palindrome
    ==========Test 6==========
    10, 20, -30, 20, 50, 30
    -30, 10, 20, 20, 30, 50
    ==========Test 7==========
    10, 20, -30, 20, 50, 30
    10, 20, -30, 20, 50, 30
    True
    ==========Test 8==========
    10, 20, -30, 20, 50, 30
    10, 20, -30, 20, 50, 30
    True
    ==========Test 9==========
    10, 20, -30, 20, 50, 30
    10, 20, 30, 40, 50, 60
    False
    ==========Test 10==========
    40, 50, None, None, None, 10, 20, 30
    10, 20, 5, None, None, None, None, None, 5, 40, 15, 25
    [10, 20, 40]
