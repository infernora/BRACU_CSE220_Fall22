

    #1a)

    def factorial(n):
        if n == 1:
            return n
        else:
            return n*factorial(n-1)  

    n=int(input("n: "))
    if n>0:
        print(factorial(n))

    n: 5
    120

    #1b)

    def fibonacci(n):
        if n<=1:           
            return 1
        else:
            return fibonacci(n-1)+fibonacci(n-2)

    n=int(input("n: "))
    if n>=0:
        print(fibonacci(n))

    n: 5
    8

    #1c)

    def array(A,i):
        if i<len(A):
            print(A[i])
            array(A,i+1)

    A=[int(i) for i in input().split(',')]
    array(A,0)    

    1,2,3,4,5
    1
    2
    3
    4
    5

    #1d)

    def powerN(num,pow):
        if pow==0:
            return 1
        return num*powerN(num,pow-1)

    num=int(input('Enter number: '))
    pow=int(input('Enter power: '))
    print(powerN(num,pow))

    Enter number: 2
    Enter power: 3
    8

    #2a)

    def binaryToDecimal(string,i,decimal):
        if len(string)==i:
            return decimal
        else:
            if string[i]=='0':
                decimal=2*decimal
            else:
                decimal=2*decimal+1
        return binaryToDecimal(string,i+1,decimal)

    print(binaryToDecimal(input('Enter binary string: '),0,0))

    Enter binary string: 1101
    13

    class Node:
        def __init__(self, e, n):
            self.element = e
            self.next = n
            
    class LinkedList:
        def __init__(self, a):
            self.head = None
            if type(a)==list:
                self.head=Node(a[0],None)
                tail=self.head
                for i in range(1,len(a)):
                    temp=Node(a[i],None)
                    tail.next=temp           
                    tail=temp  
            else:
                self.head=a
    #2b)

        def sum(self,h):
            if h==None:
                return 0
            return h.element+self.sum(h.next)
        
    #2c)    
        def reverse(self,h):
            if h==None:
                return
            self.reverse(h.next)
            print(h.element,end=' ')
                
        
        
        
    a1 = [int(i) for i in input().split(',')]
    h1 = LinkedList(a1)
    print('sum:',h1.sum(h1.head))
    print('reverse:',end=' ')
    h1.reverse(h1.head)

    10,20,30,40,50
    sum: 150
    reverse: 50 40 30 20 10 

    #3)
    def hocbuilder(height):
        if height==0:
            return 0
        if height==1:
            return 8
        else:
            return 5+hocbuilder(height-1)

    print(hocbuilder(int(input('Number of floors: '))))

    Number of floors: 3
    18

    #4a)

    def column(i):
        if i==0:
            return
        column(i-1)
        print(i, end='')

    def row(n,i):
        if n==0:
            return
        column(i)
        print("\n", end='')
        row(n-1,i+1)

    n = int(input('n:'))
    row(n, 1)
        

    n:4
    1
    12
    123
    1234

    #4a)
    def column(i):
        if i==0:
            return
        column(i-1)
        print(i, end='')

    def space(j):
        if j==0:
            return
        print(' ',end='')
        space(j-1)

    def row(n,i,j):
        if n==0:
            return
        space(j)
        column(i)
        print("\n", end='')
        row(n-1,i+1,j-1)
        

    n = int(input('n:'))
    row(n,1,n-1)

    n:5
        1
       12
      123
     1234
    12345

    #5)
    class FinalQ: 
        def print(self,array,idx): 
            if(idx<len(array)): 
                profit = self.calcProfit(array[idx]) 
                print(f'Investment: {array[idx]}; Profit: {float(profit)}\n')
                self.print(array,idx+1)
      
        def calcProfit(self,investment): 
            if investment==25000:
                return 0
            elif investment<=100000:
                return 4.5+self.calcProfit(investment-100)
            else:
                return 8+self.calcProfit(investment-100) 

    #Tester 
    array=[25000,100000,250000,308000]  
    f = FinalQ() 
    f.print(array,0)

    Investment: 25000; Profit: 0.0

    Investment: 100000; Profit: 3375.0

    Investment: 250000; Profit: 15375.0

    Investment: 308000; Profit: 20015.0
